name: Terraform CI/CD - All Environments

on:
  push:
    branches:
      - main

jobs:
  dev:
    name: Deploy Dev
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_vm_username: ${{ secrets.TF_VAR_vm_username }}
      TF_VAR_vm_password: ${{ secrets.TF_VAR_vm_password }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Init (Dev)
        run: terraform init -backend-config="key=3tier/dev.terraform.tfstate"
      - name: Plan (Dev)
        run: terraform plan -var-file="environments/dev/terraform.tfvars"

      - name: Apply (Dev)
        run: terraform apply -auto-approve -var-file="environments/dev/terraform.tfvars"
  test:
    name: Deploy Test
    runs-on: ubuntu-latest
    environment: test
    needs: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_vm_username: ${{ secrets.TF_VAR_vm_username }}
      TF_VAR_vm_password: ${{ secrets.TF_VAR_vm_password }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Init (Test)
        run: terraform init -backend-config="key=3tier/test.terraform.tfstate"

      - name: Plan (Test)
        run: terraform plan -var-file="environments/test/terraform.tfvars"
      - name: Apply (Test)
        run: terraform apply -auto-approve -var-file="environments/test/terraform.tfvars"
  prod:
    name: Deploy Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: [dev, test]
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_vm_username: ${{ secrets.TF_VAR_vm_username }}
      TF_VAR_vm_password: ${{ secrets.TF_VAR_vm_password }}
    defaults:
      run:
        working-directory: terraform
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file="terraform/environments/dev/terraform.tfvars"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -var-file="terraform/environments/dev/terraform.tfvars" --autoapprove 
